import os
import re, sys
import json
import base64
import logging
import random
import asyncio
import pytz
from database.verify_db import vr_db
from .pmfilter import auto_filter 
from Script import script
from datetime import datetime
from database.refer import referdb
from database.config_db import mdb
from pyrogram import Client, filters, enums
from pyrogram.errors import ChatAdminRequired, FloodWait
from pyrogram.types import *
from database.ia_filterdb import Media, get_file_details, unpack_new_file_id, get_bad_files
from database.users_chats_db import db, delete_all_msg
from info import CHANNELS,  ADMINS, AUTH_CHANNEL, LOG_CHANNEL, PICS, BATCH_FILE_CAPTION, CUSTOM_FILE_CAPTION, PROTECT_CONTENT, CHNL_LNK, REQST_CHANNEL, SUPPORT_CHAT_ID, MAX_B_TN, VERIFY, REACTIONS, HOW_TO_VERIFY, PICS, DEENDAYAL_VERIFIED_LOG, SUBSCRIPTION, DEENDAYAL_MOVIE_UPDATE_CHANNEL_LNK
from utils import get_settings, get_size, is_req_subscribed, save_group_settings, temp, verify_user, check_token, check_verification, get_token, get_shortlink, get_tutorial
from database.connections_mdb import active_connection

logger = logging.getLogger(__name__)

TIMEZONE = "Asia/Kolkata"
BATCH_FILES = {}


@Client.on_message(filters.command("start") & filters.incoming)
async def start(client, message):
    await message.react(emoji=random.choice(REACTIONS), big=True) 
    if message.chat.type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        buttons = [[
                    InlineKeyboardButton('‚ù§Ô∏è ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ‚ù§Ô∏è', url=f'http://t.me/{temp.U_NAME}?startgroup=true')
                ],[
                    InlineKeyboardButton('üçÅ Update Channel üçÅ', url=CHNL_LNK)
                  ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await message.reply(script.GSTART_TXT.format(message.from_user.mention if message.from_user else message.chat.title, temp.U_NAME, temp.B_NAME), reply_markup=reply_markup, disable_web_page_preview=True)
        await asyncio.sleep(2) # üò¢ https://github.com/EvamariaTG/EvaMaria/blob/master/plugins/p_ttishow.py#L17 üò¨ wait a bit, before checking.
        if not await db.get_chat(message.chat.id):
            total=await client.get_chat_members_count(message.chat.id)
            await client.send_message(LOG_CHANNEL, script.LOG_TEXT_G.format(message.chat.title, message.chat.id, total, "Unknown"))       
            await db.add_chat(message.chat.id, message.chat.title)
        return 
    if not await db.is_user_exist(message.from_user.id):
        await db.add_user(message.from_user.id, message.from_user.first_name)
        await client.send_message(LOG_CHANNEL, script.LOG_TEXT_P.format(message.from_user.id, message.from_user.mention))
    if len(message.command) != 2:
        buttons = [[
                    InlineKeyboardButton('üî∞ ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò üî∞', url=f'http://telegram.me/{temp.U_NAME}?startgroup=true')
                ],[
                    InlineKeyboardButton('üïµÔ∏è‚Äç‚ôÇÔ∏è T·¥è·¥ò S·¥á·¥Ä Ä·¥Ñ ú…™…¥…¢', callback_data="topsearch"),
                    InlineKeyboardButton('üîÑ s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='channels')
                ],[
                    InlineKeyboardButton('üö®  ú·¥á ü·¥ò', callback_data='help'),
                    InlineKeyboardButton('‚ùì ·¥Ä ô·¥è·¥ú·¥õ ', callback_data='about')
                ],[
                    InlineKeyboardButton('D·¥è…¥·¥Ä·¥õ…™·¥è…¥ üí∞', callback_data='donation'),
                    InlineKeyboardButton('E·¥Ä Ä…¥ ·¥ç·¥è…¥·¥á è..üí≤', callback_data="shortlink_info")
                ],[
                    InlineKeyboardButton('‚ú®  ô·¥ú è Íú±·¥ú ôÍú±·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ :  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä·¥ÖÍú± ‚ú®', callback_data="premium_info")
                  ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        current_time = datetime.now(pytz.timezone(TIMEZONE))
        curr_time = current_time.hour        
        if curr_time < 12:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üëã" 
        elif curr_time < 17:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥ üëã" 
        elif curr_time < 21:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üëã"
        else:
            gtxt = "…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ üëã"
        m=await message.reply_text("<i>·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è <b>Auto filter Bot</b>.\n ú·¥è·¥ò·¥á  è·¥è·¥ú' Ä·¥á ·¥Ö·¥è…™…¥…¢ ·¥°·¥á ü ü...</i>")
        await asyncio.sleep(0.4)
        await m.edit_text("‚è≥")
        await asyncio.sleep(0.5)
        await m.edit_text("ü¶ã")
        await asyncio.sleep(0.5)
        await m.edit_text("<b><i>Íú±·¥õ·¥Ä Ä·¥õ…™…¥…¢...</i></b>")
        await asyncio.sleep(0.4)
        await m.delete()        
        m=await message.reply_sticker("CAACAgUAAxkBAAEDzJFnBqclUTn2znZSO93vlbiApfQlmwACXhIAArTOiFXJ8jrRBfDoSx4E") 
        await asyncio.sleep(1)
        await m.delete()
        await message.reply_photo(
            photo=random.choice(PICS),
            caption=script.START_TXT.format(message.from_user.mention, gtxt, temp.U_NAME, temp.B_NAME),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        return
        
    if AUTH_CHANNEL and not await is_req_subscribed(client, message):
        try:
            invite_link = await client.create_chat_invite_link(int(AUTH_CHANNEL), creates_join_request=True)
        except ChatAdminRequired:
            logger.error("Make sure Bot is admin in Forcesub channel")
            return
        btn = [
            [
                InlineKeyboardButton(
                    "üìå ·¥ä·¥è…™…¥ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± ·¥Ñ ú·¥Ä…¥…¥·¥á ü üìå", url=invite_link.invite_link
                )
            ]
        ]

        if message.command[1] != "subscribe":
            try:
                kk, file_id = message.command[1].split("_", 1)
                btn.append([InlineKeyboardButton("‚Üª T Ä è A…¢·¥Ä…™…¥", callback_data=f"checksub#{kk}#{file_id}")])
            except (IndexError, ValueError):
                btn.append([InlineKeyboardButton("‚Üª T Ä è A…¢·¥Ä…™…¥", url=f"https://t.me/{temp.U_NAME}?start={message.command[1]}")])
        await client.send_photo(
            chat_id=message.from_user.id,
            photo="https://graph.org/file/7478ff3eac37f4329c3d8.jpg",
            caption="**You have not joined our Update Channel.\nClick on the Join Updats Channel button and join our updates channel.\n After that, please try again.\n\n**\n\n"
            "**‡§Ü‡§™‡§®‡•á ‡§π‡§Æ‡§æ‡§∞‡•á Update Channel ‡§ï‡•ã join ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∞‡§ñ‡§æ ‡§π‡•à‡•§**\n"
            "**Join Updates Channel ‡§µ‡§æ‡§≤‡•á ‡§¨‡§ü‡§® ‡§™‡§∞ Click ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§î‡§∞ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§Ö‡§™‡§°‡•á‡§ü ‡§ö‡•à‡§®‡§≤ ‡§ï‡•ã ‡§ú‡•ç‡§µ‡§æ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§á‡§∏‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§Ü‡§™ ‡§´‡§ø‡§∞ ‡§∏‡•á Try ‡§ï‡§∞‡•á‡§Ç‡•§.....**",
            reply_markup=InlineKeyboardMarkup(btn),
            parse_mode=enums.ParseMode.MARKDOWN
        )
        return
    if len(message.command) == 2 and message.command[1] in ["subscribe", "error", "okay", "help"]:
        buttons = [[
                    InlineKeyboardButton('üî∞ ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò üî∞', url=f'http://telegram.me/{temp.U_NAME}?startgroup=true')
                ],[
                    InlineKeyboardButton('üïµÔ∏è‚Äç‚ôÇÔ∏è T·¥è·¥ò S·¥á·¥Ä Ä·¥Ñ ú…™…¥…¢', callback_data="topsearch"),
                    InlineKeyboardButton('üîÑ s·¥ú·¥ò·¥ò·¥è Ä·¥õ', callback_data='channels')
                ],[
                    InlineKeyboardButton('üö®  ú·¥á ü·¥ò', callback_data='help'),
                    InlineKeyboardButton('‚ùì ·¥Ä ô·¥è·¥ú·¥õ ', callback_data='about')
                ],[
                    InlineKeyboardButton('D·¥è…¥·¥Ä·¥õ…™·¥è…¥ üí∞', callback_data='donation'),
                    InlineKeyboardButton('E·¥Ä Ä…¥ ·¥ç·¥è…¥·¥á è..üí≤', callback_data="shortlink_info")
                ],[
                    InlineKeyboardButton('‚ú®  ô·¥ú è Íú±·¥ú ôÍú±·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ :  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä·¥ÖÍú± ‚ú®', callback_data="premium_info")
                  ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        current_time = datetime.now(pytz.timezone(TIMEZONE))
        curr_time = current_time.hour        
        if curr_time < 12:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üëã" 
        elif curr_time < 17:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥ üëã" 
        elif curr_time < 21:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üëã"
        else:
            gtxt = "…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ üëã"
        m=await message.reply_text("<i>·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è <b>Auto filter Bot</b>.\n ú·¥è·¥ò·¥á  è·¥è·¥ú' Ä·¥á ·¥Ö·¥è…™…¥…¢ ·¥°·¥á ü ü...</i>")
        await asyncio.sleep(0.4)
        await m.edit_text("‚è≥")
        await asyncio.sleep(0.5)
        await m.edit_text("ü¶ã")
        await asyncio.sleep(0.5)
        await m.edit_text("<b><i>Íú±·¥õ·¥Ä Ä·¥õ…™…¥…¢...</i></b>")
        await asyncio.sleep(0.4)
        await m.delete()        
        m=await message.reply_sticker("CAACAgIAAxkBAAELqnll79FksWxjL972veZb1WQfnwwKJgAC-hUAAoG_EElPnJ3wozyhejQE") 
        await asyncio.sleep(1)
        await m.delete()
        await message.reply_photo(
            photo=random.choice(PICS),
            caption=script.START_TXT.format(message.from_user.mention, gtxt, temp.U_NAME, temp.B_NAME),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        return
           
    if message.command[1].startswith("reff_"):
        try:
            user_id = int(message.command[1].split("_")[1])
        except ValueError:
            await message.reply_text("Invalid refer!")
            return
        if user_id == message.from_user.id:
            await message.reply_text("H·¥á è D·¥ú·¥Ö·¥á, Y·¥è·¥ú C·¥Ä…¥'·¥õ R·¥á“ì·¥á Ä Y·¥è·¥ú Äs·¥á ü“ì ü§£!\n\ns ú·¥Ä Ä·¥á  ü…™…¥·¥ã  è·¥è·¥ú Ä “ì Ä…™·¥á…¥·¥Ö ·¥Ä…¥·¥Ö …¢·¥á·¥õ 10  Ä·¥á“ì·¥á Ä Ä·¥Ä ü ·¥ò·¥è…™…¥·¥õ …™“ì  è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ñ·¥è ü ü·¥á·¥Ñ·¥õ…™…¥…¢ 100  Ä·¥á“ì·¥á Ä Ä·¥Ä ü ·¥ò·¥è…™…¥·¥õs ·¥õ ú·¥á…¥  è·¥è·¥ú ·¥Ñ·¥Ä…¥ …¢·¥á·¥õ 1 ·¥ç·¥è…¥·¥õ ú “ì Ä·¥á·¥á ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ç·¥á·¥ç ô·¥á Äs ú…™·¥ò.")
            return
        if referdb.is_user_in_list(message.from_user.id):
            await message.reply_text("Y·¥è·¥ú  ú·¥Ä·¥†·¥á  ô·¥á·¥á…¥ ·¥Ä ü Ä·¥á·¥Ä·¥Ö è …™…¥·¥†…™·¥õ·¥á·¥Ö ‚ùó")
            return
        try:
            uss = await client.get_users(user_id)
        except Exception:
            return 	    
        referdb.add_user(message.from_user.id)
        fromuse = referdb.get_refer_points(user_id) + 10
        if fromuse == 100:
            referdb.add_refer_points(user_id, 0) 
            await message.reply_text(f"üéâ ùóñùóºùóªùó¥ùóøùóÆùòÅùòÇùóπùóÆùòÅùó∂ùóºùóªùòÄ! ùó¨ùóºùòÇ ùòÑùóºùóª ùü≠ùü¨ ùó•ùó≤ùó≥ùó≤ùóøùóøùóÆùóπ ùóΩùóºùó∂ùóªùòÅ ùóØùó≤ùó∞ùóÆùòÇùòÄùó≤ ùó¨ùóºùòÇ ùóµùóÆùòÉùó≤ ùóØùó≤ùó≤ùóª ùó¶ùòÇùó∞ùó∞ùó≤ùòÄùòÄùó≥ùòÇùóπùóπùòÜ ùóúùóªùòÉùó∂ùòÅùó≤ùó± ‚òû {uss.mention}!")		    
            await message.reply_text(user_id, f"You have been successfully invited by {message.from_user.mention}!") 	
            seconds = 2592000
            if seconds > 0:
                expiry_time = datetime.datetime.now() + datetime.timedelta(seconds=seconds)
                user_data = {"id": user_id, "expiry_time": expiry_time}  # Using "id" instead of "user_id"  
                await db.update_user(user_data)  # Use the update_user method to update or insert user data		    
                await client.send_message(
                chat_id=user_id,
                text=f"<b>H·¥á è {uss.mention}\n\nY·¥è·¥ú …¢·¥è·¥õ 1 ·¥ç·¥è…¥·¥õ ú ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥  ô è …™…¥·¥†…™·¥õ…™…¥…¢ 10 ·¥ús·¥á Äs ‚ùó", disable_web_page_preview=True              
                )
            for admin in ADMINS:
                await client.send_message(chat_id=admin, text=f"S·¥ú·¥Ñ·¥Ñ·¥áss “ì·¥ú ü ü è ·¥õ·¥Äs·¥ã ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö  ô è ·¥õ ú…™s ·¥ús·¥á Ä:\n\nuser N·¥Ä·¥ç·¥á: {uss.mention}\n\nUs·¥á Ä …™·¥Ö: {uss.id}!")	
        else:
            referdb.add_refer_points(user_id, fromuse)
            await message.reply_text(f"You have been successfully invited by {uss.mention}!")
            await client.send_message(user_id, f"ùóñùóºùóªùó¥ùóøùóÆùòÅùòÇùóπùóÆùòÅùó∂ùóºùóªùòÄ! ùó¨ùóºùòÇ ùòÑùóºùóª ùü≠ùü¨ ùó•ùó≤ùó≥ùó≤ùóøùóøùóÆùóπ ùóΩùóºùó∂ùóªùòÅ ùóØùó≤ùó∞ùóÆùòÇùòÄùó≤ ùó¨ùóºùòÇ ùóµùóÆùòÉùó≤ ùóØùó≤ùó≤ùóª ùó¶ùòÇùó∞ùó∞ùó≤ùòÄùòÄùó≥ùòÇùóπùóπùòÜ ùóúùóªùòÉùó∂ùòÅùó≤ùó± ‚òû{message.from_user.mention}!")
        return
        
    if len(message.command) == 2 and message.command[1] in ["premium"]:
        buttons = [[
                    InlineKeyboardButton('üì≤ Íú±·¥á…¥·¥Ö ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ Íú±·¥Ñ Ä·¥á·¥á…¥Íú± ú·¥è·¥õ', user_id=int(6646028262))
                  ],[
                    InlineKeyboardButton('‚ùå ·¥Ñ ü·¥èÍú±·¥á ‚ùå', callback_data='close_data')
                  ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await message.reply_photo(
            photo=(SUBSCRIPTION),
            caption=script.PREPLANS_TXT.format(message.from_user.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        return  
    if len(message.command) == 2 and message.command[1].startswith('search'):
        movies = message.command[1].split("-", 1)[1] 
        movie = movies.replace('-',' ')
        message.text = movie 
        await auto_filter(client, message) 
        return
    
    data = message.command[1]
    try:
        pre, file_id = data.split('_', 1)
    except:
        file_id = data
        pre = ""
    if data.split("-", 1)[0] == "BATCH":
        sts = await message.reply("<b>Please wait...</b>")
        file_id = data.split("-", 1)[1]
        msgs = BATCH_FILES.get(file_id)
        if not msgs:
            file = await client.download_media(file_id)
            try: 
                with open(file) as file_data:
                    msgs=json.loads(file_data.read())
            except:
                await sts.edit("FAILED")
                return await client.send_message(LOG_CHANNEL, "UNABLE TO OPEN FILE.")
            os.remove(file)
            BATCH_FILES[file_id] = msgs
        for msg in msgs:
            title = msg.get("title")
            size=get_size(int(msg.get("size", 0)))
            f_caption=msg.get("caption", "")
            if BATCH_FILE_CAPTION:
                try:
                    f_caption=BATCH_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='' if f_caption is None else f_caption)
                except Exception as e:
                    logger.exception(e)
                    f_caption=f_caption
            if f_caption is None:
                f_caption = f"{title}"
            try:
                await client.send_cached_media(
                    chat_id=message.from_user.id,
                    file_id=msg.get("file_id"),
                    caption=f_caption,
                    protect_content=msg.get('protect', False),
                    reply_markup=InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton('üöÄ Íú∞·¥ÄÍú±·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö / ·¥°·¥Ä·¥õ·¥Ñ ú ·¥è…¥ ü…™…¥·¥á üñ•Ô∏è', callback_data=f'generate_stream_link:{file_id}'),
                            ],
                            [
                                InlineKeyboardButton('üìå ·¥ä·¥è…™…¥ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± ·¥Ñ ú·¥Ä…¥…¥·¥á ü üìå', url=DEENDAYAL_MOVIE_UPDATE_CHANNEL_LNK) #Don't change anything 
                            ]
                        ]
                    )
                )
            except FloodWait as e:
                await asyncio.sleep(e.x)
                logger.warning(f"Floodwait of {e.x} sec.")
                await client.send_cached_media(
                    chat_id=message.from_user.id,
                    file_id=msg.get("file_id"),
                    caption=f_caption,
                    protect_content=msg.get('protect', False),
                    reply_markup=InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton('üöÄ Íú∞·¥ÄÍú±·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö / ·¥°·¥Ä·¥õ·¥Ñ ú ·¥è…¥ ü…™…¥·¥á üñ•Ô∏è', callback_data=f'generate_stream_link:{file_id}'),
                            ],
                            [
                                InlineKeyboardButton('üìå ·¥ä·¥è…™…¥ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± ·¥Ñ ú·¥Ä…¥…¥·¥á ü üìå', url=DEENDAYAL_MOVIE_UPDATE_CHANNEL_LNK) #Don't change anything 
                            ]
                        ]
                    )
                )
            except Exception as e:
                logger.warning(e, exc_info=True)
                continue
            await asyncio.sleep(1) 
        await sts.delete()
        return
    
    elif data.split("-", 1)[0] == "DSTORE":
        sts = await message.reply("<b>Please wait...</b>")
        b_string = data.split("-", 1)[1]
        decoded = (base64.urlsafe_b64decode(b_string + "=" * (-len(b_string) % 4))).decode("ascii")
        try:
            f_msg_id, l_msg_id, f_chat_id, protect = decoded.split("_", 3)
        except:
            f_msg_id, l_msg_id, f_chat_id = decoded.split("_", 2)
            protect = "/pbatch" if PROTECT_CONTENT else "batch"
        diff = int(l_msg_id) - int(f_msg_id)
        async for msg in client.iter_messages(int(f_chat_id), int(l_msg_id), int(f_msg_id)):
            if msg.media:
                media = getattr(msg, msg.media.value)
                if BATCH_FILE_CAPTION:
                    try:
                        f_caption=BATCH_FILE_CAPTION.format(file_name=getattr(media, 'file_name', ''), file_size=getattr(media, 'file_size', ''), file_caption=getattr(msg, 'caption', ''))
                    except Exception as e:
                        logger.exception(e)
                        f_caption = getattr(msg, 'caption', '')
                else:
                    media = getattr(msg, msg.media.value)
                    file_name = getattr(media, 'file_name', '')
                    f_caption = getattr(msg, 'caption', file_name)
                try:
                    await msg.copy(message.chat.id, caption=f_caption, protect_content=True if protect == "/pbatch" else False)
                except FloodWait as e:
                    await asyncio.sleep(e.x)
                    await msg.copy(message.chat.id, caption=f_caption, protect_content=True if protect == "/pbatch" else False)
                except Exception as e:
                    logger.exception(e)
                    continue
            elif msg.empty:
                continue
            else:
                try:
                    await msg.copy(message.chat.id, protect_content=True if protect == "/pbatch" else False)
                except FloodWait as e:
                    await asyncio.sleep(e.x)
                    await msg.copy(message.chat.id, protect_content=True if protect == "/pbatch" else False)
                except Exception as e:
                    logger.exception(e)
                    continue
            await asyncio.sleep(1) 
        return await sts.delete()

    elif data.split("-", 1)[0] == "verify":
        userid = data.split("-", 2)[1]
        token = data.split("-", 3)[2] 
        fileid = data.split("-", 3)[3]
        if str(message.from_user.id) != str(userid):
            return await message.reply_text(
                text="<b>Invalid link or Expired link !</b>",
                protect_content=False
            )
        is_valid = await check_token(client, userid, token)
        if is_valid == True:
            btn = [[
                InlineKeyboardButton("C ü…™·¥Ñ·¥ã H·¥á Ä·¥á T·¥è G·¥á·¥õ F…™ ü·¥á..üçÅ", url=f"https://telegram.me/{temp.U_NAME}?start=files_{fileid}")
            ],[
                InlineKeyboardButton("üèÉ..B·¥Ä·¥Ñ·¥ã T·¥è G Ä·¥è·¥ú·¥ò", url="https://t.me/+uABLEyE-TJEyODg1")
            ]]
            await message.reply_photo(
                photo="https://graph.org/file/6928de1539e2e80e47fb8.jpg",
                caption=f"<b>Hey {message.from_user.mention},\n\nùëåùëúùë¢ ùê¥ùëüùëí ùëÜùë¢ùëêùëêùëíùë†ùë†ùëìùë¢ùëô ùëâùëíùëüùëñùëìùëñùëíùëë ! ùëÅùëúùë§ ùëåùëúùë¢ ùêªùëéùë£ùëí ùëàùëõùëôùëñùëöùëñùë°ùëíùëë ùê¥ùëêùëêùëíùë†ùë† ùêπùëúùëü 24 ùêªùëúùë¢ùëüùë†.\n\n<blockquote>‡§Ü‡§™ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§π‡•ã ‡§ó‡§è ‡§π‡•à‡§Ç ‡§Ö‡§¨ ‡§Ü‡§™ 24 ‡§ò‡§Ç‡§ü‡•á ‡§§‡§ï ùê∑ùëñùëüùëíùëêùë° ùëÄùëúùë£ùëñùëí ‡§ï‡•Ä ùêπùëñùëôùëíùë† ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§</blockquote></b>",
                reply_markup=InlineKeyboardMarkup(btn)
            )
            await verify_user(client, userid, token) 
            await vr_db.save_verification(message.from_user.id) 
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            current_date = now.strftime("%Y-%m-%d")
            
            deendayal_message = (
                f"Name: {message.from_user.mention}\n"
                f"Time: {current_time}\n"
                f"Date: {current_date}\n"
                f"#verify_completed"
            )
            await client.send_message(chat_id=DEENDAYAL_VERIFIED_LOG, text=deendayal_message)

        else:
            return await message.reply_text(
                text="<b>Invalid link or Expired link !</b>",
                protect_content=False
            )
    if data.startswith("sendfiles"):
        current_time = datetime.now(pytz.timezone(TIMEZONE))
        curr_time = current_time.hour        
        if curr_time < 12:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üëã" 
        elif curr_time < 17:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥ üëã" 
        elif curr_time < 21:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üëã"
        else:
            gtxt = "…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ üëã"
        chat_id = int("-" + file_id.split("-")[1])
        userid = message.from_user.id if message.from_user else None
        g = await get_shortlink(chat_id, f"https://telegram.me/{temp.U_NAME}?start=allfiles_{file_id}")
        k = await client.send_message(chat_id=message.from_user.id,text=f"ü´Ç  ú·¥á è {message.from_user.mention}, {gtxt}\n\n‚ÄºÔ∏è …¢·¥á·¥õ ·¥Ä ü ü Íú∞…™ ü·¥áÍú± …™…¥ ·¥Ä Íú±…™…¥…¢ ü·¥á  ü…™…¥·¥ã ‚ÄºÔ∏è\n\n‚úÖ  è·¥è·¥ú Ä  ü…™…¥·¥ã …™Íú±  Ä·¥á·¥Ä·¥Ö è, ·¥ã…™…¥·¥Ö ü è ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ô·¥ú·¥õ·¥õ·¥è…¥.\n\n<u>‚ö†Ô∏è …¥·¥è·¥õ·¥á :- ·¥õ ú…™Íú± ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á …™Íú± ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö …™…¥ 5 ·¥ç…™…¥·¥ú·¥õ·¥áÍú± ·¥õ·¥è ·¥Ä·¥†·¥è…™·¥Ö ·¥Ñ·¥è·¥ò è Ä…™…¢ ú·¥õ..Íú±·¥Ä·¥†·¥á ·¥õ ú…™Íú±  ü…™…¥·¥ã ·¥õ·¥è Íú±·¥è·¥ç·¥á·¥° ú·¥á Ä·¥á ·¥á üÍú±·¥á</u>", reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton('üìÅ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö üìÅ', url=g)
                    ], [
                        InlineKeyboardButton('‚ö°  ú·¥è·¥° ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ‚ö°', url=await get_tutorial(chat_id))
                    ]
                ]
            )
        )
        await asyncio.sleep(300)
        await k.edit("<b> è·¥è·¥ú Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á …™Íú± ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö !\n·¥ã…™…¥·¥Ö ü è Íú±·¥á·¥Ä Ä·¥Ñ ú ·¥Ä…¢·¥Ä…™…¥.</b>")
        return
        
    
    elif data.startswith("short"):
        current_time = datetime.now(pytz.timezone(TIMEZONE))
        curr_time = current_time.hour        
        if curr_time < 12:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üëã" 
        elif curr_time < 17:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥ üëã" 
        elif curr_time < 21:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üëã"
        else:
            gtxt = "…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ üëã"        
        user_id = message.from_user.id
        if await db.has_premium_access(message.from_user.id):
            pass
        else:
            chat_id = temp.SHORT.get(user_id)
            files_ = await get_file_details(file_id)
            files = files_[0]
            g = await get_shortlink(chat_id, f"https://telegram.me/{temp.U_NAME}?start=file_{file_id}")
            k = await client.send_message(chat_id=user_id,text=f"ü´Ç  ú·¥á è {message.from_user.mention}, {gtxt}\n\n‚úÖ  è·¥è·¥ú Ä  ü…™…¥·¥ã …™Íú±  Ä·¥á·¥Ä·¥Ö è, ·¥ã…™…¥·¥Ö ü è ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ô·¥ú·¥õ·¥õ·¥è…¥.\n\n‚ö†Ô∏è Íú∞…™ ü·¥á …¥·¥Ä·¥ç·¥á : <code>{files.file_name}</code> \n\nüì• Íú∞…™ ü·¥á Íú±…™·¥¢·¥á : <code>{get_size(files.file_size)}</code>\n\n<u>‚ö†Ô∏è …¥·¥è·¥õ·¥á :- ·¥õ ú…™Íú± ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á …™Íú± ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö …™…¥ 10 ·¥ç…™…¥·¥ú·¥õ·¥áÍú± ·¥õ·¥è ·¥Ä·¥†·¥è…™·¥Ö ·¥Ñ·¥è·¥ò è Ä…™…¢ ú·¥õ..Íú±·¥Ä·¥†·¥á ·¥õ ú…™Íú±  ü…™…¥·¥ã ·¥õ·¥è Íú±·¥è·¥ç·¥á·¥° ú·¥á Ä·¥á ·¥á üÍú±·¥á</u>", reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton('üìÅ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö üìÅ', url=g)
                        ], [
                            InlineKeyboardButton('‚ö°  ú·¥è·¥° ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ‚ö°', url=await get_tutorial(chat_id))
                        ]
                    ]
                )
            )
            await asyncio.sleep(600)
            await k.edit("<b> è·¥è·¥ú Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á …™Íú± ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö !\n·¥ã…™…¥·¥Ö ü è Íú±·¥á·¥Ä Ä·¥Ñ ú ·¥Ä…¢·¥Ä…™…¥.</b>")
            return
        
    elif data.startswith("all"):
        files = temp.GETALL.get(file_id)
        if not files:
            return await message.reply('<b><i>…¥·¥è Íú±·¥ú·¥Ñ ú Íú∞…™ ü·¥á ·¥áx…™Íú±·¥õÍú± !</b></i>')
        filesarr = []
        for file in files:
            file_id = file.file_id
            files_ = await get_file_details(file_id)
            files1 = files_[0]
            title = ' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@'), files1.file_name.split()))
            size=get_size(files1.file_size)
            f_caption=files1.caption
            if CUSTOM_FILE_CAPTION:
                try:
                    f_caption=CUSTOM_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='' if f_caption is None else f_caption)
                except Exception as e:
                    logger.exception(e)
                    f_caption=f_caption
            if f_caption is None:
                f_caption = f"{' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@'), files1.file_name.split()))}"
            if await db.has_premium_access(message.from_user.id): 
                pass 
            else:
               if not await check_verification(client, message.from_user.id) and VERIFY == True:
                   btn = [[
                       InlineKeyboardButton("‚úÖ C ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è ·¥†·¥á Ä…™“ì è ‚úÖ", url=await get_token(client, message.from_user.id, f"https://telegram.me/{temp.U_NAME}?start=", file_id))
                       ],[
                       InlineKeyboardButton("‚ö° H·¥è·¥° ·¥õ·¥è ·¥†·¥á Ä…™“ì è ‚ö°", url=HOW_TO_VERIFY)
                   ]]
                   l = await message.reply_text(
                   text="<b>‚ô®Ô∏è YOU ARE NOT VERIFIED !\nKINDLY VERIFY TO CONTINUE & YOU CAN GET UNLIMITED ACCESS FOR 24 HOURS ‚úÖ\n\n<blockquote>‚öúÔ∏è ‡§á‡§∏ BOT ‡§∏‡•á MOVIE ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§™‡§ï‡•ã VERIFY ‡§ï‡§∞‡§®‡§æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à VERIFY ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§Ü‡§™ 24 ‡§ò‡§Ç‡§ü‡•á ‡§§‡§ï UNLIMITED MOVIES ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•ã‡•§</blockquote>\n\n<blockquote>üî• ‡§Ö‡§ó‡§∞ ‡§Ü‡§™ VERIFY ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§§‡•ã ‡§Ü‡§™ PREMIUM ‡§≤‡•á ‡§∏‡§ï‡§§‡•á ‡§π‡•ã, PREMIUM ‡§≤‡•á‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§Ü‡§™ UNLIMITED MOVIES ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞ ‡§™‡§æ‡§ì‡§ó‡•á ‡§î‡§∞ ‡§Ü‡§™‡§ï‡•ã VERIFY ‡§ï‡§∞‡§®‡•á ‡§ï‡•ã‡§à ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à\n\nPLAN DETAILS ‡§ï‡•á ‡§≤‡§ø‡§è CLICK ‡§ï‡§∞‡•á‡§Ç /plan</blockquote></b>",
                   protect_content=False,
                   reply_markup=InlineKeyboardMarkup(btn)
                   )
                   await asyncio.sleep(180)
                   await l.delete()
                   return
            msg = await client.send_cached_media(
                chat_id=message.from_user.id,
                file_id=file_id,
                caption=f_caption,
                protect_content=True if pre == 'filep' else False,
                reply_markup=InlineKeyboardMarkup(
            [
             [
              InlineKeyboardButton('üöÄ Íú∞·¥ÄÍú±·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö / ·¥°·¥Ä·¥õ·¥Ñ ú ·¥è…¥ ü…™…¥·¥á üñ•Ô∏è', callback_data=f'generate_stream_link:{file_id}'),
             ],
             [
              InlineKeyboardButton('üìå ·¥ä·¥è…™…¥ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± ·¥Ñ ú·¥Ä…¥…¥·¥á ü üìå', url=DEENDAYAL_MOVIE_UPDATE_CHANNEL_LNK) #Don't change anything 
             ]
            ]
        )
    )
            filesarr.append(msg)
        k = await client.send_message(chat_id = message.from_user.id, text=f"<b><u>‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏èIMPORTANT‚ùóÔ∏èÔ∏è‚ùóÔ∏è‚ùóÔ∏è</u></b>\n\n·¥õ ú…™Íú± ·¥ç·¥è·¥†…™·¥á Íú∞…™ ü·¥á/·¥†…™·¥Ö·¥á·¥è ·¥°…™ ü ü  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö …™…¥<b><u>15 ·¥ç…™…¥·¥ú·¥õ·¥áÍú±</u> ü´• <i></b>(·¥Ö·¥ú·¥á ·¥õ·¥è ·¥Ñ·¥è·¥ò è Ä…™…¢ ú·¥õ …™Íú±Íú±·¥ú·¥áÍú±)</i>.\n\n<b><i>·¥ò ü·¥á·¥ÄÍú±·¥á Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú…™Íú± Íú∞…™ ü·¥á ·¥õ·¥è Íú±·¥è·¥ç·¥á·¥° ú·¥á Ä·¥á ·¥á üÍú±·¥á ·¥Ä…¥·¥Ö Íú±·¥õ·¥Ä Ä·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö…™…¥…¢ ·¥õ ú·¥á Ä·¥á</i></b>")
        await asyncio.sleep(900)
        for x in filesarr:
            await x.delete()
        await k.edit_text("<b> è·¥è·¥ú Ä ·¥Ä ü ü ·¥†…™·¥Ö·¥á·¥èÍú±/Íú∞…™ ü·¥áÍú± ·¥Ä Ä·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è !\n·¥ã…™…¥·¥Ö ü è Íú±·¥á·¥Ä Ä·¥Ñ ú ·¥Ä…¢·¥Ä…™…¥</b>")
        return    
        
    elif data.startswith("files"):
        current_time = datetime.now(pytz.timezone(TIMEZONE))
        curr_time = current_time.hour        
        if curr_time < 12:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üëã" 
        elif curr_time < 17:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥ üëã" 
        elif curr_time < 21:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üëã"
        else:
            gtxt = "…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ üëã"        
        user_id = message.from_user.id
        if await db.has_premium_access(message.from_user.id):
            pass
        else:
            if temp.SHORT.get(user_id)==None:
                return await message.reply_text(text="<b>Please Search Again in Group</b>")
            else:
                chat_id = temp.SHORT.get(user_id)
        settings = await get_settings(chat_id)
        if settings['is_shortlink']:
            files_ = await get_file_details(file_id)
            files = files_[0]
            g = await get_shortlink(chat_id, f"https://telegram.me/{temp.U_NAME}?start=file_{file_id}")
            k = await client.send_message(chat_id=user_id,text=f"ü´Ç  ú·¥á è {message.from_user.mention}, {gtxt}\n\n‚úÖ  è·¥è·¥ú Ä  ü…™…¥·¥ã …™Íú±  Ä·¥á·¥Ä·¥Ö è, ·¥ã…™…¥·¥Ö ü è ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ô·¥ú·¥õ·¥õ·¥è…¥.\n\n‚ö†Ô∏è Íú∞…™ ü·¥á …¥·¥Ä·¥ç·¥á : <code>{files.file_name}</code> \n\nüì• Íú∞…™ ü·¥á Íú±…™·¥¢·¥á : <code>{get_size(files.file_size)}</code>\n\n", reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton('üìÅ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö üìÅ', url=g)
                        ], [
                            InlineKeyboardButton('‚ö°  ú·¥è·¥° ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ‚ö°', url=await get_tutorial(chat_id))
                        ]
                    ]
                )
            )
            await asyncio.sleep(600)
            await k.edit("<b> è·¥è·¥ú Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á …™Íú± ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö !\n·¥ã…™…¥·¥Ö ü è Íú±·¥á·¥Ä Ä·¥Ñ ú ·¥Ä…¢·¥Ä…™…¥.</b>")
            return
    user = message.from_user.id
    files_ = await get_file_details(file_id)           
    if not files_:
        pre, file_id = ((base64.urlsafe_b64decode(data + "=" * (-len(data) % 4))).decode("ascii")).split("_", 1)
        try:
            if await db.has_premium_access(message.from_user.id): 
                pass 
            else:
               if not await check_verification(client, message.from_user.id) and VERIFY == True:
                   btn = [[
                       InlineKeyboardButton("‚úÖ C ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è ·¥†·¥á Ä…™“ì è ‚úÖ", url=await get_token(client, message.from_user.id, f"https://telegram.me/{temp.U_NAME}?start=", file_id))
                   ],[
                        InlineKeyboardButton("‚ö° H·¥è·¥° ·¥õ·¥è ·¥†·¥á Ä…™“ì è ‚ö°", url=HOW_TO_VERIFY)
                   ]]
                   l = await message.reply_text(
                       text="<b>‚ô®Ô∏è YOU ARE NOT VERIFIED !\nKINDLY VERIFY TO CONTINUE & YOU CAN GET UNLIMITED ACCESS FOR 24 HOURS ‚úÖ\n\n<blockquote>‚öúÔ∏è ‡§á‡§∏ BOT ‡§∏‡•á MOVIE ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§™‡§ï‡•ã VERIFY ‡§ï‡§∞‡§®‡§æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à VERIFY ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§Ü‡§™ 24 ‡§ò‡§Ç‡§ü‡•á ‡§§‡§ï UNLIMITED MOVIES ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•ã‡•§ <blockquote>\n\n<blockquote>üî• ‡§Ö‡§ó‡§∞ ‡§Ü‡§™ VERIFY ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§§‡•ã ‡§Ü‡§™ PREMIUM ‡§≤‡•á ‡§∏‡§ï‡§§‡•á ‡§π‡•ã, PREMIUM ‡§≤‡•á‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§Ü‡§™ UNLIMITED MOVIES ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞ ‡§™‡§æ‡§ì‡§ó‡•á ‡§î‡§∞ ‡§Ü‡§™‡§ï‡•ã VERIFY ‡§ï‡§∞‡§®‡•á ‡§ï‡•ã‡§à ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§®‡§π‡•Ä ‡§π‡•à\n\nPLAN DETAILS ‡§ï‡•á ‡§≤‡§ø‡§è CLICK ‡§ï‡§∞‡•á‡§Ç /plan</blockquote></b>",
                       protect_content=False,
                       reply_markup=InlineKeyboardMarkup(btn)
                   )
                   await asyncio.sleep(180)
                   await l.delete()
                   return
            msg = await client.send_cached_media(
                chat_id=message.from_user.id,
                file_id=file_id,
                protect_content=True if pre == 'filep' else False,
                reply_markup=InlineKeyboardMarkup(
            [
             [
              InlineKeyboardButton('üöÄ Íú∞·¥ÄÍú±·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö / ·¥°·¥Ä·¥õ·¥Ñ ú ·¥è…¥ ü…™…¥·¥á üñ•Ô∏è', callback_data=f'generate_stream_link:{file_id}'),
             ],
             [
              InlineKeyboardButton('üìå ·¥ä·¥è…™…¥ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± ·¥Ñ ú·¥Ä…¥…¥·¥á ü üìå', url=DEENDAYAL_MOVIE_UPDATE_CHANNEL_LNK) #Don't change anything 
             ]
            ]
        )
    )
            filetype = msg.media
            file = getattr(msg, filetype.value)
            title = '' + ' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@'), file.file_name.split()))
            size=get_size(file.file_size)
            f_caption = f"<code>{title}</code>"
            if CUSTOM_FILE_CAPTION:
                try:
                    f_caption=CUSTOM_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='')
                except:
                    return
            await msg.edit_caption(f_caption)
            btn = [[
                InlineKeyboardButton("‚ùó …¢·¥á·¥õ Íú∞…™ ü·¥á ·¥Ä…¢·¥Ä…™…¥ ‚ùó", callback_data=f'delfile#{file_id}')
            ]]
            k = await msg.reply("<b><u>‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏èIMPORTANT‚ùóÔ∏èÔ∏è‚ùóÔ∏è‚ùóÔ∏è</u></b>\n\n·¥õ ú…™Íú± ·¥ç·¥è·¥†…™·¥á Íú∞…™ ü·¥á/·¥†…™·¥Ö·¥á·¥è ·¥°…™ ü ü  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö …™…¥<b><u>15 ·¥ç…™…¥·¥ú·¥õ·¥áÍú± </u> ü´• <i></b>(·¥Ö·¥ú·¥á ·¥õ·¥è ·¥Ñ·¥è·¥ò è Ä…™…¢ ú·¥õ …™Íú±Íú±·¥ú·¥áÍú±)</i>.\n\n<b><i>·¥ò ü·¥á·¥ÄÍú±·¥á Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú…™Íú± Íú∞…™ ü·¥á ·¥õ·¥è Íú±·¥è·¥ç·¥á·¥° ú·¥á Ä·¥á ·¥á üÍú±·¥á ·¥Ä…¥·¥Ö Íú±·¥õ·¥Ä Ä·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö…™…¥…¢ ·¥õ ú·¥á Ä·¥á</i></b>",quote=True)
            await asyncio.sleep(900)
            await msg.delete()
            await k.edit_text("<b> è·¥è·¥ú Ä ·¥†…™·¥Ö·¥á·¥è / Íú∞…™ ü·¥á …™Íú± Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö !!</b>")
            return
        except:
            pass
        return await message.reply('…¥·¥è Íú±·¥ú·¥Ñ ú Íú∞…™ ü·¥á ·¥áx…™Íú±·¥õÍú± !')
    files = files_[0]
    title = '' + ' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@'), files.file_name.split()))
    size=get_size(files.file_size)
    f_caption=files.caption
    if CUSTOM_FILE_CAPTION:
        try:
            f_caption=CUSTOM_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='' if f_caption is None else f_caption)
        except Exception as e:
            logger.exception(e)
            f_caption=f_caption
    if f_caption is None:
        f_caption = f" {' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@'), files.file_name.split()))}"
    if await db.has_premium_access(message.from_user.id): 
                pass 
    else:
       if not await check_verification(client, message.from_user.id) and VERIFY == True:
           btn = [[
              InlineKeyboardButton("‚úÖ C ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è ·¥†·¥á Ä…™“ì è ‚úÖ", url=await get_token(client, message.from_user.id, f"https://telegram.me/{temp.U_NAME}?start=", file_id))
           ],[
              InlineKeyboardButton("‚ö° H·¥è·¥° ·¥õ·¥è ·¥†·¥á Ä…™“ì è ‚ö°", url=HOW_TO_VERIFY)
           ]]
           l = await message.reply_text(
            text="<b>‚ô®Ô∏è YOU ARE NOT VERIFIED !\nKINDLY VERIFY TO CONTINUE & YOU CAN GET UNLIMITED ACCESS FOR 24 HOURS ‚úÖ\n\n<blockquote>‚öúÔ∏è ‡§á‡§∏ BOT ‡§∏‡•á MOVIE ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§™‡§ï‡•ã VERIFY ‡§ï‡§∞‡§®‡§æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à VERIFY ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§Ü‡§™ 24 ‡§ò‡§Ç‡§ü‡•á ‡§§‡§ï UNLIMITED MOVIES ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•ã‡•§</blockquote> \n\n<blockquote>üî• ‡§Ö‡§ó‡§∞ ‡§Ü‡§™ VERIFY ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§§‡•ã ‡§Ü‡§™ PREMIUM ‡§≤‡•á ‡§∏‡§ï‡§§‡•á ‡§π‡•ã, PREMIUM ‡§≤‡•á‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§Ü‡§™ UNLIMITED MOVIES ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞ ‡§™‡§æ‡§ì‡§ó‡•á ‡§î‡§∞ ‡§Ü‡§™‡§ï‡•ã VERIFY ‡§ï‡§∞‡§®‡•á ‡§ï‡•ã‡§à ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à\n\nPLAN DETAILS ‡§ï‡•á ‡§≤‡§ø‡§è CLICK ‡§ï‡§∞‡•á‡§Ç /plan</blockquote></b>",
            protect_content=False,
            reply_markup=InlineKeyboardMarkup(btn)
           )
           await asyncio.sleep(180)
           await l.delete()
           return
    msg = await client.send_cached_media(
        chat_id=message.from_user.id,
        file_id=file_id,
        caption=f_caption,
        protect_content=True if pre == 'filep' else False,
        reply_markup=InlineKeyboardMarkup(
            [
             [
              InlineKeyboardButton('üöÄ Íú∞·¥ÄÍú±·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö / ·¥°·¥Ä·¥õ·¥Ñ ú ·¥è…¥ ü…™…¥·¥á üñ•Ô∏è', callback_data=f'generate_stream_link:{file_id}'),
             ],
             [
              InlineKeyboardButton('üìå ·¥ä·¥è…™…¥ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± ·¥Ñ ú·¥Ä…¥…¥·¥á ü üìå', url=DEENDAYAL_MOVIE_UPDATE_CHANNEL_LNK) #Don't change anything 
             ]
            ]
        )
    )
    btn = [[
        InlineKeyboardButton("‚ùó …¢·¥á·¥õ Íú∞…™ ü·¥á ·¥Ä…¢·¥Ä…™…¥ ‚ùó", callback_data=f'delfile#{file_id}')
    ]]
    k = await msg.reply("<b><u>‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏èIMPORTANT‚ùóÔ∏èÔ∏è‚ùóÔ∏è‚ùóÔ∏è</u></b>\n\n·¥õ ú…™Íú± ·¥ç·¥è·¥†…™·¥á Íú∞…™ ü·¥á/·¥†…™·¥Ö·¥á·¥è ·¥°…™ ü ü  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö …™…¥ <b><u>15 ·¥ç…™…¥·¥ú·¥õ·¥áÍú±</u> ü´• <i></b>(·¥Ö·¥ú·¥á ·¥õ·¥è ·¥Ñ·¥è·¥ò è Ä…™…¢ ú·¥õ …™Íú±Íú±·¥ú·¥áÍú±)</i>.\n\n<b><i>·¥ò ü·¥á·¥ÄÍú±·¥á Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú…™Íú± Íú∞…™ ü·¥á ·¥õ·¥è Íú±·¥è·¥ç·¥á·¥° ú·¥á Ä·¥á ·¥á üÍú±·¥á ·¥Ä…¥·¥Ö Íú±·¥õ·¥Ä Ä·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö…™…¥…¢ ·¥õ ú·¥á Ä·¥á</i></b>",quote=True)
    await asyncio.sleep(900)
    await msg.delete()
    await k.edit_text("<b> è·¥è·¥ú Ä ·¥†…™·¥Ö·¥á·¥è / Íú∞…™ ü·¥á …™Íú± Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö !!</b>")
    return  

@Client.on_message(filters.command('channel') & filters.user(ADMINS))
async def channel_info(bot, message):
           
    """Send basic information of channel"""
    if isinstance(CHANNELS, (int, str)):
        channels = [CHANNELS]
    elif isinstance(CHANNELS, list):
        channels = CHANNELS
    else:
        raise ValueError("·¥ú…¥·¥áx·¥ò·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ è·¥ò·¥á ·¥èÍú∞ ·¥Ñ ú·¥Ä…¥…¥·¥á üÍú±.")

    text = 'üìë **…™…¥·¥Ö·¥áx·¥á·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á üÍú± / …¢ Ä·¥è·¥ú·¥òÍú±  ü…™Íú±·¥õ :**\n'
    for channel in channels:
        chat = await bot.get_chat(channel)
        if chat.username:
            text += '\n@' + chat.username
        else:
            text += '\n' + chat.title or chat.first_name

    text += f'\n\n**·¥õ·¥è·¥õ·¥Ä ü :** {len(CHANNELS)}'

    if len(text) < 4096:
        await message.reply(text)
    else:
        file = 'Indexed channels.txt'
        with open(file, 'w') as f:
            f.write(text)
        await message.reply_document(file)
        os.remove(file)


@Client.on_message(filters.command('logs') & filters.user(ADMINS))
async def log_file(bot, message):
    """Send log file"""
    try:
        await message.reply_document('TELEGRAM BOT.LOG')
    except Exception as e:
        await message.reply(str(e))

@Client.on_message(filters.command('delete') & filters.user(ADMINS))
async def delete(bot, message):
    """Delete file from database"""
    reply = message.reply_to_message
    if reply and reply.media:
        msg = await message.reply("·¥ò Ä·¥è·¥Ñ·¥áÍú±Íú±…™…¥…¢...‚è≥", quote=True)
    else:
        await message.reply(' Ä·¥á·¥ò ü è ·¥õ·¥è Íú∞…™ ü·¥á ·¥°…™·¥õ ú /delete ·¥° ú…™·¥Ñ ú  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á Íú∞ Ä·¥è·¥ç ·¥Ö ô.', quote=True)
        return

    for file_type in ("document", "video", "audio"):
        media = getattr(reply, file_type, None)
        if media is not None:
            break
    else:
        await msg.edit('·¥õ ú…™Íú± …™Íú± …¥·¥è·¥õ Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö Íú∞…™ ü·¥á Íú∞·¥è Ä·¥ç·¥Ä·¥õ.')
        return
    
    file_id, file_ref = unpack_new_file_id(media.file_id)

    result = await Media.collection.delete_one({
        '_id': file_id,
    })
    if result.deleted_count:
        await msg.edit('Íú∞…™ ü·¥á …™Íú± Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö Íú∞ Ä·¥è·¥ç ·¥Ö ô ‚úÖ')
    else:
        file_name = re.sub(r"(_|\-|\.|\+)", " ", str(media.file_name))
        result = await Media.collection.delete_many({
            'file_name': file_name,
            'file_size': media.file_size,
            'mime_type': media.mime_type
            })
        if result.deleted_count:
            await msg.edit('Íú∞…™ ü·¥á …™Íú± Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö Íú∞ Ä·¥è·¥ç ·¥Ö ô ‚úÖ')
        else:
            # files indexed before https://github.com/EvamariaTG/EvaMaria/commit/f3d2a1bcb155faf44178e5d7a685a1b533e714bf#diff-86b613edf1748372103e94cacff3b578b36b698ef9c16817bb98fe9ef22fb669R39 
            # have original file name.
            result = await Media.collection.delete_many({
                'file_name': media.file_name,
                'file_size': media.file_size,
                'mime_type': media.mime_type
            })
            if result.deleted_count:
                await msg.edit('Íú∞…™ ü·¥á …™Íú± Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö Íú∞ Ä·¥è·¥ç ·¥Ö ô ‚úÖ')
            else:
                await msg.edit('Íú∞…™ ü·¥á …™Íú± …¥·¥è·¥õ Íú∞·¥è·¥ú…¥·¥Ö …™…¥ ·¥Ö ô ‚ùå')


@Client.on_message(filters.command('deleteall') & filters.user(ADMINS))
async def delete_all_index(bot, message):
    await message.reply_text(
        '·¥õ ú…™Íú± ·¥°…™ ü ü ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ä ü ü  è·¥è·¥ú Ä …™…¥·¥Ö·¥áx·¥á·¥Ö Íú∞…™ ü·¥áÍú± !\n·¥Ö·¥è  è·¥è·¥ú Íú±·¥õ…™ ü ü ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥á ?',
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        text="‚ö†Ô∏è  è·¥áÍú± ‚ö†Ô∏è", callback_data="autofilter_delete"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå …¥·¥è ‚ùå", callback_data="close_data"
                    )
                ],
            ]
        ),
        quote=True,
    )


@Client.on_callback_query(filters.regex(r'^autofilter_delete'))
async def delete_all_index_confirm(bot, message):
    await Media.collection.drop()
    await message.answer('·¥ç·¥Ä…™…¥·¥õ·¥Ä…™…¥·¥á·¥Ö  ô è :  ú·¥ò')
    await message.message.edit('Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ä ü ü …™…¥·¥Ö·¥áx·¥á·¥Ö Íú∞…™ ü·¥áÍú± ‚úÖ')


@Client.on_message(filters.command('settings'))
async def settings(client, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply(f" è·¥è·¥ú' Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥.\n·¥úÍú±·¥á /connect {message.chat.id} …™…¥ ·¥ò·¥ç.")
    chat_type = message.chat.type

    if chat_type == enums.ChatType.PRIVATE:
        grpid = await active_connection(str(userid))
        if grpid is not None:
            grp_id = grpid
            try:
                chat = await client.get_chat(grpid)
                title = chat.title
            except:
                await message.reply_text("·¥ç·¥Ä·¥ã·¥á Íú±·¥ú Ä·¥á …™'·¥ç ·¥ò Ä·¥áÍú±·¥á…¥·¥õ …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò !!", quote=True)
                return
        else:
            await message.reply_text("…™'·¥ç …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è ·¥Ä…¥ è …¢ Ä·¥è·¥ú·¥ò !", quote=True)
            return

    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grp_id = message.chat.id
        title = message.chat.title

    else:
        return

    st = await client.get_chat_member(grp_id, userid)
    if (
            st.status != enums.ChatMemberStatus.ADMINISTRATOR
            and st.status != enums.ChatMemberStatus.OWNER
            and str(userid) not in ADMINS
    ):
        return
    
    settings = await get_settings(grp_id)

    try:
        if settings['max_btn']:
            settings = await get_settings(grp_id)
    except KeyError:
        await save_group_settings(grp_id, 'max_btn', False)
        settings = await get_settings(grp_id)
    if 'is_shortlink' not in settings.keys():
        await save_group_settings(grp_id, 'is_shortlink', False)
    else:
        pass

    if settings is not None:
        buttons = [        
                [
                InlineKeyboardButton(
                    ' Ä·¥áÍú±·¥ú ü·¥õ ·¥ò·¥Ä…¢·¥á',
                    callback_data=f'setgs#button#{settings["button"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    ' ô·¥ú·¥õ·¥õ·¥è…¥' if settings["button"] else '·¥õ·¥áx·¥õ',
                    callback_data=f'setgs#button#{settings["button"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    'Íú∞…™ ü·¥á Íú±·¥á…¥·¥Ö ·¥ç·¥è·¥Ö·¥á',
                    callback_data=f'setgs#botpm#{settings["botpm"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    'Íú±·¥õ·¥Ä Ä·¥õ' if settings["botpm"] else '·¥Ä·¥ú·¥õ·¥è',
                    callback_data=f'setgs#botpm#{settings["botpm"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    'Íú∞…™ ü·¥á Íú±·¥á·¥Ñ·¥ú Ä·¥á',
                    callback_data=f'setgs#file_secure#{settings["file_secure"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '·¥á…¥·¥Ä ô ü·¥á' if settings["file_secure"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                    callback_data=f'setgs#file_secure#{settings["file_secure"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    '…™·¥ç·¥Ö ô ·¥ò·¥èÍú±·¥õ·¥á Ä',
                    callback_data=f'setgs#imdb#{settings["imdb"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '·¥á…¥·¥Ä ô ü·¥á' if settings["imdb"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                    callback_data=f'setgs#imdb#{settings["imdb"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    'Íú±·¥ò·¥á ü ü ·¥Ñ ú·¥á·¥Ñ·¥ã',
                    callback_data=f'setgs#spell_check#{settings["spell_check"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '·¥á…¥·¥Ä ô ü·¥á' if settings["spell_check"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                    callback_data=f'setgs#spell_check#{settings["spell_check"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    '·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥çÍú±…¢',
                    callback_data=f'setgs#welcome#{settings["welcome"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '·¥á…¥·¥Ä ô ü·¥á' if settings["welcome"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                    callback_data=f'setgs#welcome#{settings["welcome"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    '·¥Ä·¥ú·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á',
                    callback_data=f'setgs#auto_delete#{settings["auto_delete"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '·¥á…¥·¥Ä ô ü·¥á' if settings["auto_delete"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                    callback_data=f'setgs#auto_delete#{settings["auto_delete"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    '·¥Ä·¥ú·¥õ·¥è Íú∞…™ ü·¥õ·¥á Ä',
                    callback_data=f'setgs#auto_ffilter#{settings["auto_ffilter"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '·¥á…¥·¥Ä ô ü·¥á' if settings["auto_ffilter"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                    callback_data=f'setgs#auto_ffilter#{settings["auto_ffilter"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    '·¥ç·¥Äx  ô·¥ú·¥õ·¥õ·¥è…¥Íú±',
                    callback_data=f'setgs#max_btn#{settings["max_btn"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '10' if settings["max_btn"] else f'{MAX_B_TN}',
                    callback_data=f'setgs#max_btn#{settings["max_btn"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    'Íú± ú·¥è Ä·¥õ ü…™…¥·¥ã',
                    callback_data=f'setgs#is_shortlink#{settings["is_shortlink"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '·¥á…¥·¥Ä ô ü·¥á' if settings["is_shortlink"] else '·¥Ö…™Íú±·¥Ä ô ü·¥á',
                    callback_data=f'setgs#is_shortlink#{settings["is_shortlink"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton('‚áã ·¥Ñ ü·¥èÍú±·¥á Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± ·¥ç·¥á…¥·¥ú ‚áã', 
                                     callback_data='close_data'
                                     )
            ]
        ]
        

        btn = [[
                InlineKeyboardButton("üë§ ·¥è·¥ò·¥á…¥ …™…¥ ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä·¥õ üë§", callback_data=f"opnsetpm#{grp_id}")
              ],[
                InlineKeyboardButton("üë• ·¥è·¥ò·¥á…¥  ú·¥á Ä·¥á üë•", callback_data=f"opnsetgrp#{grp_id}")
              ]]

        reply_markup = InlineKeyboardMarkup(buttons)
        if chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
            await message.reply_text(
                text="<b>·¥° ú·¥á Ä·¥á ·¥Ö·¥è  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥è·¥ò·¥á…¥ Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± ·¥ç·¥á…¥·¥ú ? ‚öôÔ∏è</b>",
                reply_markup=InlineKeyboardMarkup(btn),
                disable_web_page_preview=True,
                parse_mode=enums.ParseMode.HTML,
                reply_to_message_id=message.id
            )
        else:
            await message.reply_text(
                text=f"<b>·¥Ñ ú·¥Ä…¥…¢·¥á  è·¥è·¥ú Ä Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± Íú∞·¥è Ä {title} ·¥ÄÍú±  è·¥è·¥ú ·¥°…™Íú± ú ‚öô</b>",
                reply_markup=reply_markup,
                disable_web_page_preview=True,
                parse_mode=enums.ParseMode.HTML,
                reply_to_message_id=message.id
            )



@Client.on_message(filters.command('set_template'))
async def save_template(client, message):
    sts = await message.reply("·¥Ñ ú·¥á·¥Ñ·¥ã…™…¥…¢ ·¥õ·¥á·¥ç·¥ò ü·¥Ä·¥õ·¥á...")
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply(f" è·¥è·¥ú' Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥.\n·¥úÍú±·¥á /connect {message.chat.id} …™…¥ ·¥ò·¥ç.")
    chat_type = message.chat.type

    if chat_type == enums.ChatType.PRIVATE:
        grpid = await active_connection(str(userid))
        if grpid is not None:
            grp_id = grpid
            try:
                chat = await client.get_chat(grpid)
                title = chat.title
            except:
                await message.reply_text("·¥ç·¥Ä·¥ã·¥á Íú±·¥ú Ä·¥á …™'·¥ç ·¥ò Ä·¥áÍú±·¥á…¥·¥õ …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò !!", quote=True)
                return
        else:
            await message.reply_text("…™'·¥ç …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è ·¥Ä…¥ è …¢ Ä·¥è·¥ú·¥ò !", quote=True)
            return

    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grp_id = message.chat.id
        title = message.chat.title

    else:
        return

    st = await client.get_chat_member(grp_id, userid)
    if (
            st.status != enums.ChatMemberStatus.ADMINISTRATOR
            and st.status != enums.ChatMemberStatus.OWNER
            and str(userid) not in ADMINS
    ):
        return

    if len(message.command) < 2:
        return await sts.edit("…¥·¥è …™…¥·¥ò·¥ú·¥õ !")
    template = message.text.split(" ", 1)[1]
    await save_group_settings(grp_id, 'template', template)
    await sts.edit(f"‚úÖ Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ñ ú·¥Ä…¥…¢·¥á·¥Ö ·¥õ·¥á·¥ç·¥ò ü·¥Ä·¥õ·¥á Íú∞·¥è Ä <code>{title}</code> ·¥õ·¥è\n\n{template}")


@Client.on_message((filters.command(["request", "Request"]) | filters.regex("#request") | filters.regex("#Request")) & filters.group)
async def requests(bot, message):
    if REQST_CHANNEL is None or SUPPORT_CHAT_ID is None: return # Must add REQST_CHANNEL and SUPPORT_CHAT_ID to use this feature
    if message.reply_to_message and SUPPORT_CHAT_ID == message.chat.id:
        chat_id = message.chat.id
        reporter = str(message.from_user.id)
        mention = message.from_user.mention
        success = True
        content = message.reply_to_message.text
        try:
            if REQST_CHANNEL is not None:
                btn = [[
                        InlineKeyboardButton('·¥†…™·¥á·¥°  Ä·¥á«´·¥ú·¥áÍú±·¥õ', url=f"{message.reply_to_message.link}"),
                        InlineKeyboardButton('Íú± ú·¥è·¥° ·¥è·¥ò·¥õ…™·¥è…¥Íú±', callback_data=f'show_option#{reporter}')
                      ]]
                reported_post = await bot.send_message(chat_id=REQST_CHANNEL, text=f"<b>üìù  Ä·¥á«´·¥ú·¥áÍú±·¥õ : <u>{content}</u>\n\nüìö  Ä·¥á·¥ò·¥è Ä·¥õ·¥á·¥Ö  ô è : {mention}\nüìñ  Ä·¥á·¥ò·¥è Ä·¥õ·¥á Ä …™·¥Ö : {reporter}\n\n</b>", reply_markup=InlineKeyboardMarkup(btn))
                success = True
            elif len(content) >= 3:
                for admin in ADMINS:
                    btn = [[
                        InlineKeyboardButton('·¥†…™·¥á·¥°  Ä·¥á«´·¥ú·¥áÍú±·¥õ', url=f"{message.reply_to_message.link}"),
                        InlineKeyboardButton('Íú± ú·¥è·¥° ·¥è·¥ò·¥õ…™·¥è…¥Íú±', callback_data=f'show_option#{reporter}')
                      ]]
                    reported_post = await bot.send_message(chat_id=admin, text=f"<b>üìù  Ä·¥á«´·¥ú·¥áÍú±·¥õ : <u>{content}</u>\n\nüìö  Ä·¥á·¥ò·¥è Ä·¥õ·¥á·¥Ö  ô è : {mention}\nüìñ  Ä·¥á·¥ò·¥è Ä·¥õ·¥á Ä …™·¥Ö : {reporter}\n\n</b>", reply_markup=InlineKeyboardMarkup(btn))
                    success = True
            else:
                if len(content) < 3:
                    await message.reply_text("<b> è·¥è·¥ú ·¥ç·¥úÍú±·¥õ ·¥õ è·¥ò·¥á ·¥Ä ô·¥è·¥ú·¥õ  è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥áÍú±·¥õ [·¥ç…™…¥…™·¥ç·¥ú·¥ç 3 ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á ÄÍú±].  Ä·¥á«´·¥ú·¥áÍú±·¥õÍú± ·¥Ñ·¥Ä…¥'·¥õ  ô·¥á ·¥á·¥ç·¥ò·¥õ è.</b>")
            if len(content) < 3:
                success = False
        except Exception as e:
            await message.reply_text(f"Error: {e}")
            pass
        
    elif SUPPORT_CHAT_ID == message.chat.id:
        chat_id = message.chat.id
        reporter = str(message.from_user.id)
        mention = message.from_user.mention
        success = True
        content = message.text
        keywords = ["#request", "/request", "#Request", "/Request"]
        for keyword in keywords:
            if keyword in content:
                content = content.replace(keyword, "")
        try:
            if REQST_CHANNEL is not None and len(content) >= 3:
                btn = [[
                        InlineKeyboardButton('·¥†…™·¥á·¥°  Ä·¥á«´·¥ú·¥áÍú±·¥õ', url=f"{message.link}"),
                        InlineKeyboardButton('Íú± ú·¥è·¥° ·¥è·¥ò·¥õ…™·¥è…¥Íú±', callback_data=f'show_option#{reporter}')
                      ]]
                reported_post = await bot.send_message(chat_id=REQST_CHANNEL, text=f"<b>üìù  Ä·¥á«´·¥ú·¥áÍú±·¥õ : <u>{content}</u>\n\nüìö  Ä·¥á·¥ò·¥è Ä·¥õ·¥á·¥Ö  ô è : {mention}\nüìñ  Ä·¥á·¥ò·¥è Ä·¥õ·¥á Ä …™·¥Ö : {reporter}\n\n</b>", reply_markup=InlineKeyboardMarkup(btn))
                success = True
            elif len(content) >= 3:
                for admin in ADMINS:
                    btn = [[
                        InlineKeyboardButton('·¥†…™·¥á·¥°  Ä·¥á«´·¥ú·¥áÍú±·¥õ', url=f"{message.link}"),
                        InlineKeyboardButton('Íú± ú·¥è·¥° ·¥è·¥ò·¥õ…™·¥è…¥Íú±', callback_data=f'show_option#{reporter}')
                      ]]
                    reported_post = await bot.send_message(chat_id=admin, text=f"<b>üìù  Ä·¥á«´·¥ú·¥áÍú±·¥õ : <u>{content}</u>\n\nüìö  Ä·¥á·¥ò·¥è Ä·¥õ·¥á·¥Ö  ô è : {mention}\nüìñ  Ä·¥á·¥ò·¥è Ä·¥õ·¥á Ä …™·¥Ö : {reporter}\n\n</b>", reply_markup=InlineKeyboardMarkup(btn))
                    success = True
            else:
                if len(content) < 3:
                    await message.reply_text("<b> è·¥è·¥ú ·¥ç·¥úÍú±·¥õ ·¥õ è·¥ò·¥á ·¥Ä ô·¥è·¥ú·¥õ  è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥áÍú±·¥õ [·¥ç…™…¥…™·¥ç·¥ú·¥ç 3 ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á ÄÍú±].  Ä·¥á«´·¥ú·¥áÍú±·¥õÍú± ·¥Ñ·¥Ä…¥'·¥õ  ô·¥á ·¥á·¥ç·¥ò·¥õ è.</b>")
            if len(content) < 3:
                success = False
        except Exception as e:
            await message.reply_text(f"Error: {e}")
            pass
     
    elif SUPPORT_CHAT_ID == message.chat.id:
        chat_id = message.chat.id
        reporter = str(message.from_user.id)
        mention = message.from_user.mention
        success = True
        content = message.text
        keywords = ["#request", "/request", "#Request", "/Request"]
        for keyword in keywords:
            if keyword in content:
                content = content.replace(keyword, "")
        try:
            if REQST_CHANNEL is not None and len(content) >= 3:
                btn = [[
                        InlineKeyboardButton('·¥†…™·¥á·¥°  Ä·¥á«´·¥ú·¥áÍú±·¥õ', url=f"{message.link}"),
                        InlineKeyboardButton('Íú± ú·¥è·¥° ·¥è·¥ò·¥õ…™·¥è…¥Íú±', callback_data=f'show_option#{reporter}')
                      ]]
                reported_post = await bot.send_message(chat_id=REQST_CHANNEL, text=f"<b>üìù  Ä·¥á«´·¥ú·¥áÍú±·¥õ : <u>{content}</u>\n\nüìö  Ä·¥á·¥ò·¥è Ä·¥õ·¥á·¥Ö  ô è : {mention}\nüìñ  Ä·¥á·¥ò·¥è Ä·¥õ·¥á Ä …™·¥Ö : {reporter}\n\n</b>", reply_markup=InlineKeyboardMarkup(btn))
                success = True
            elif len(content) >= 3:
                for admin in ADMINS:
                    btn = [[
                        InlineKeyboardButton('·¥†…™·¥á·¥°  Ä·¥á«´·¥ú·¥áÍú±·¥õ', url=f"{message.link}"),
                        InlineKeyboardButton('Íú± ú·¥è·¥° ·¥è·¥ò·¥õ…™·¥è…¥Íú±', callback_data=f'show_option#{reporter}')
                      ]]
                    reported_post = await bot.send_message(chat_id=admin, text=f"<b>üìù  Ä·¥á«´·¥ú·¥áÍú±·¥õ : <u>{content}</u>\n\nüìö  Ä·¥á·¥ò·¥è Ä·¥õ·¥á·¥Ö  ô è : {mention}\nüìñ  Ä·¥á·¥ò·¥è Ä·¥õ·¥á Ä …™·¥Ö : {reporter}\n\n</b>", reply_markup=InlineKeyboardMarkup(btn))
                    success = True
            else:
                if len(content) < 3:
                    await message.reply_text("<b> è·¥è·¥ú ·¥ç·¥úÍú±·¥õ ·¥õ è·¥ò·¥á ·¥Ä ô·¥è·¥ú·¥õ  è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥áÍú±·¥õ [·¥ç…™…¥…™·¥ç·¥ú·¥ç 3 ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á ÄÍú±].  Ä·¥á«´·¥ú·¥áÍú±·¥õÍú± ·¥Ñ·¥Ä…¥'·¥õ  ô·¥á ·¥á·¥ç·¥ò·¥õ è.</b>")
            if len(content) < 3:
                success = False
        except Exception as e:
            await message.reply_text(f"Error: {e}")
            pass

    else:
        success = False
    
    if success:
        '''if isinstance(REQST_CHANNEL, (int, str)):
            channels = [REQST_CHANNEL]
        elif isinstance(REQST_CHANNEL, list):
            channels = REQST_CHANNEL
        for channel in channels:
            chat = await bot.get_chat(channel)
        #chat = int(chat)'''
        link = await bot.create_chat_invite_link(int(REQST_CHANNEL))
        btn = [[
                InlineKeyboardButton('·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü', url=link.invite_link),
                InlineKeyboardButton('·¥†…™·¥á·¥°  Ä·¥á«´·¥ú·¥áÍú±·¥õ', url=f"{reported_post.link}")
              ]]
        await message.reply_text("<b> è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥áÍú±·¥õ  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö! ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥°·¥Ä…™·¥õ Íú∞·¥è Ä Íú±·¥è·¥ç·¥á ·¥õ…™·¥ç·¥á.\n\n·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü Íú∞…™ ÄÍú±·¥õ & ·¥†…™·¥á·¥°  Ä·¥á«´·¥ú·¥áÍú±·¥õ.</b>", reply_markup=InlineKeyboardMarkup(btn))
    
@Client.on_message(filters.command("send") & filters.user(ADMINS))
async def send_msg(bot, message):
    if message.reply_to_message:
        target_id = message.text.split(" ", 1)[1]
        out = "Users Saved In DB Are:\n\n"
        success = False
        try:
            user = await bot.get_users(target_id)
            users = await db.get_all_users()
            async for usr in users:
                out += f"{usr['id']}"
                out += '\n'
            if str(user.id) in str(out):
                await message.reply_to_message.copy(int(user.id))
                success = True
            else:
                success = False
            if success:
                await message.reply_text(f"<b> è·¥è·¥ú Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á  ú·¥ÄÍú±  ô·¥á·¥á…¥ Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è Íú±·¥á…¥·¥õ ·¥õ·¥è {user.mention}.</b>")
            else:
                await message.reply_text("<b>·¥õ ú…™Íú± ·¥úÍú±·¥á Ä ·¥Ö…™·¥Ö…¥'·¥õ Íú±·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ·¥õ ú…™Íú±  ô·¥è·¥õ  è·¥á·¥õ !</b>")
        except Exception as e:
            await message.reply_text(f"<b>Error: {e}</b>")
    else:
        await message.reply_text("<b>·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥ÄÍú± ·¥Ä  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä…¥ è ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á ·¥úÍú±…™…¥…¢ ·¥õ ú·¥á ·¥õ·¥Ä Ä…¢·¥á·¥õ ·¥Ñ ú·¥Ä·¥õ …™·¥Ö. Íú∞·¥è Ä ·¥á…¢:  /send ·¥úÍú±·¥á Ä…™·¥Ö</b>")

@Client.on_message(filters.command("deletefiles") & filters.user(ADMINS))
async def deletemultiplefiles(bot, message):
    chat_type = message.chat.type
    if chat_type != enums.ChatType.PRIVATE:
        return await message.reply_text(f"<b>Hey {message.from_user.mention}, This command won't work in groups. It only works on my PM !</b>")
    else:
        pass
    try:
        keyword = message.text.split(" ", 1)[1]
    except:
        return await message.reply_text(f"<b>Hey {message.from_user.mention}, Give me a keyword along with the command to delete files.</b>")
    k = await bot.send_message(chat_id=message.chat.id, text=f"<b>Fetching Files for your query {keyword} on DB... Please wait...</b>")
    files, total = await get_bad_files(keyword)
    await k.delete()
    #await k.edit_text(f"<b>Found {total} files for your query {keyword} !\n\nFile deletion process will start in 5 seconds !</b>")
    #await asyncio.sleep(5)
    btn = [[
       InlineKeyboardButton("‚ö†Ô∏è Yes, Continue ! ‚ö†Ô∏è", callback_data=f"killfilesdq#{keyword}")
       ],[
       InlineKeyboardButton("‚ùå No, Abort operation ! ‚ùå", callback_data="close_data")
    ]]
    await message.reply_text(
        text=f"<b>Found {total} files for your query {keyword} !\n\nDo you want to delete?</b>",
        reply_markup=InlineKeyboardMarkup(btn),
        parse_mode=enums.ParseMode.HTML
    )

@Client.on_message(filters.command("shortlink"))
async def shortlink(bot, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply(f" è·¥è·¥ú' Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥, ·¥õ·¥ú Ä…¥ ·¥èÍú∞Íú∞ ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥õ ú…™Íú± ·¥Ä…¢·¥Ä…™…¥ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")
    chat_type = message.chat.type
    if chat_type == enums.ChatType.PRIVATE:
        return await message.reply_text(f"<b> ú·¥á è {message.from_user.mention}, ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥è…¥ ü è ·¥°·¥è Ä·¥ãÍú± …™…¥ …¢ Ä·¥è·¥ú·¥òÍú± !")
    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grpid = message.chat.id
        title = message.chat.title
    else:
        return
    data = message.text
    userid = message.from_user.id
    user = await bot.get_chat_member(grpid, userid)
    if user.status != enums.ChatMemberStatus.ADMINISTRATOR and user.status != enums.ChatMemberStatus.OWNER and str(userid) not in ADMINS:
        return await message.reply_text("<b> è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥Ä·¥Ñ·¥Ñ·¥áÍú±Íú± ·¥õ·¥è ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö !\n·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥è…¥ ü è ·¥°·¥è Ä·¥ãÍú± Íú∞·¥è Ä …¢ Ä·¥è·¥ú·¥ò ·¥Ä·¥Ö·¥ç…™…¥Íú±.</b>")
    else:
        pass
    try:
        command, shortlink_url, api = data.split(" ")
    except:
        return await message.reply_text("<b>·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á !\n…¢…™·¥†·¥á ·¥ç·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ä ü·¥è…¥…¢ ·¥°…™·¥õ ú Íú± ú·¥è Ä·¥õ…¥·¥á Ä ·¥°·¥á ôÍú±…™·¥õ·¥á ·¥Ä…¥·¥Ö ·¥Ä·¥ò…™.\n\nÍú∞·¥è Ä·¥ç·¥Ä·¥õ : <code>/shortlink krishnalink.com c8dacdff6e91a8e4b4f093fdb4d8ae31bc273c1a</code>")
    reply = await message.reply_text("<b>·¥ò ü·¥á·¥ÄÍú±·¥á ·¥°·¥Ä…™·¥õ...</b>")
    shortlink_url = re.sub(r"https?://?", "", shortlink_url)
    shortlink_url = re.sub(r"[:/]", "", shortlink_url)
    await save_group_settings(grpid, 'shortlink', shortlink_url)
    await save_group_settings(grpid, 'shortlink_api', api)
    await save_group_settings(grpid, 'is_shortlink', True)
    await reply.edit_text(f"<b>‚úÖ Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ä·¥Ö·¥Ö·¥á·¥Ö Íú± ú·¥è Ä·¥õ ü…™…¥·¥ã Íú∞·¥è Ä <code>{title}</code>.\n\nÍú± ú·¥è Ä·¥õ ü…™…¥·¥ã ·¥°·¥á ôÍú±…™·¥õ·¥á : <code>{shortlink_url}</code>\nÍú± ú·¥è Ä·¥õ ü…™…¥·¥ã ·¥Ä·¥ò…™ : <code>{api}</code></b>")

@Client.on_message(filters.command("setshortlinkoff") & filters.user(ADMINS))
async def offshortlink(bot, message):
    chat_type = message.chat.type
    if chat_type == enums.ChatType.PRIVATE:
        return await message.reply_text("·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥è Ä·¥ãÍú± ·¥è…¥ ü è …™…¥ …¢ Ä·¥è·¥ú·¥òÍú± !")
    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grpid = message.chat.id
        title = message.chat.title
    else:
        return
    await save_group_settings(grpid, 'is_shortlink', False)
    ENABLE_SHORTLINK = False
    return await message.reply_text("Íú± ú·¥è Ä·¥õ ü…™…¥·¥ã Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ö…™Íú±·¥Ä ô ü·¥á·¥Ö.")
    
@Client.on_message(filters.command("setshortlinkon") & filters.user(ADMINS))
async def onshortlink(bot, message):
    chat_type = message.chat.type
    if chat_type == enums.ChatType.PRIVATE:
        return await message.reply_text("·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥è Ä·¥ãÍú± ·¥è…¥ ü è …™…¥ …¢ Ä·¥è·¥ú·¥òÍú± !")
    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grpid = message.chat.id
        title = message.chat.title
    else:
        return
    await save_group_settings(grpid, 'is_shortlink', True)
    ENABLE_SHORTLINK = True
    return await message.reply_text("Íú± ú·¥è Ä·¥õ ü…™…¥·¥ã Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥á…¥·¥Ä ô ü·¥á·¥Ö.")


@Client.on_message(filters.command("shortlink_info"))
async def ginfo(bot, message):
    chat_type = message.chat.type
    if chat_type == enums.ChatType.PRIVATE:
        return await message.reply_text(f"<b>{message.from_user.mention},\n\n·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò.</b>")
    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grpid = message.chat.id
        title = message.chat.title
    else:
        return
    chat_id=message.chat.id
    userid = message.from_user.id
    user = await bot.get_chat_member(grpid, userid)
#     if 'shortlink' in settings.keys():
#         su = settings['shortlink']
#         sa = settings['shortlink_api']
#     else:
#         return await message.reply_text("<b>Shortener Url Not Connected\n\nYou can Connect Using /shortlink command</b>")
#     if 'tutorial' in settings.keys():
#         st = settings['tutorial']
#     else:
#         return await message.reply_text("<b>Tutorial Link Not Connected\n\nYou can Connect Using /set_tutorial command</b>")
    if user.status != enums.ChatMemberStatus.ADMINISTRATOR and user.status != enums.ChatMemberStatus.OWNER and str(userid) not in ADMINS:
        return await message.reply_text("<b>·¥è…¥ ü è …¢ Ä·¥è·¥ú·¥ò ·¥è·¥°…¥·¥á Ä ·¥è Ä ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥Ä…¥ ·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö !</b>")
    else:
        settings = await get_settings(chat_id) #fetching settings for group
        if 'shortlink' in settings.keys() and 'tutorial' in settings.keys():
            su = settings['shortlink']
            sa = settings['shortlink_api']
            st = settings['tutorial']
            return await message.reply_text(f"<b><u>·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ  Íú±·¥õ·¥Ä·¥õ·¥úÍú±<u> üìä\n\n·¥°·¥á ôÍú±…™·¥õ·¥á : <code>{su}</code>\n\n·¥Ä·¥ò…™ : <code>{sa}</code>\n\n·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü : {st}</b>", disable_web_page_preview=True)
        elif 'shortlink' in settings.keys() and 'tutorial' not in settings.keys():
            su = settings['shortlink']
            sa = settings['shortlink_api']
            return await message.reply_text(f"<b><u>·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ  Íú±·¥õ·¥Ä·¥õ·¥úÍú±<u> üìä\n\n·¥°·¥á ôÍú±…™·¥õ·¥á : <code>{su}</code>\n\n·¥Ä·¥ò…™ : <code>{sa}</code>\n\n·¥úÍú±·¥á /set_tutorial ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è Íú±·¥á·¥õ  è·¥è·¥ú Ä ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü.")
        elif 'shortlink' not in settings.keys() and 'tutorial' in settings.keys():
            st = settings['tutorial']
            return await message.reply_text(f"<b>·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü : <code>{st}</code>\n\n·¥úÍú±·¥á  /shortlink  ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö  ·¥õ·¥è  ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ   è·¥è·¥ú Ä  Íú± ú·¥è Ä·¥õ…¥·¥á Ä</b>")
        else:
            return await message.reply_text("Íú± ú·¥è Ä·¥õ…¥·¥á Ä ·¥Ä…¥·¥Ö ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö.\n\n·¥Ñ ú·¥á·¥Ñ·¥ã /set_tutorial  ·¥Ä…¥·¥Ö  /shortlink  ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")

@Client.on_message(filters.command("set_tutorial"))
async def settutorial(bot, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply(f" è·¥è·¥ú' Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥, ·¥õ·¥ú Ä…¥ ·¥èÍú∞Íú∞ ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")
    chat_type = message.chat.type
    if chat_type == enums.ChatType.PRIVATE:
        return await message.reply_text("·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥è Ä·¥ãÍú± ·¥è…¥ ü è …™…¥ …¢ Ä·¥è·¥ú·¥òÍú± !")
    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grpid = message.chat.id
        title = message.chat.title
    else:
        return
    userid = message.from_user.id
    user = await bot.get_chat_member(grpid, userid)
    if user.status != enums.ChatMemberStatus.ADMINISTRATOR and user.status != enums.ChatMemberStatus.OWNER and str(userid) not in ADMINS:
        return
    else:
        pass
    if len(message.command) == 1:
        return await message.reply("<b>…¢…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü  ü…™…¥·¥ã ·¥Ä ü·¥è…¥…¢ ·¥°…™·¥õ ú ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.\n\n·¥úÍú±·¥Ä…¢·¥á : /set_tutorial <code>https://t.me/HowToOpenHP</code></b>")
    elif len(message.command) == 2:
        reply = await message.reply_text("<b>·¥ò ü·¥á·¥ÄÍú±·¥á ·¥°·¥Ä…™·¥õ...</b>")
        tutorial = message.command[1]
        await save_group_settings(grpid, 'tutorial', tutorial)
        await save_group_settings(grpid, 'is_tutorial', True)
        await reply.edit_text(f"<b>‚úÖ Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü\n\n è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò : {title}\n\n è·¥è·¥ú Ä ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü : <code>{tutorial}</code></b>")
    else:
        return await message.reply("<b> è·¥è·¥ú ·¥á…¥·¥õ·¥á Ä·¥á·¥Ö …™…¥·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ Íú∞·¥è Ä·¥ç·¥Ä·¥õ !\n·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ Íú∞·¥è Ä·¥ç·¥Ä·¥õ : /set_tutorial <code>https://t.me/HowToOpenHP</code></b>")

@Client.on_message(filters.command("remove_tutorial"))
async def removetutorial(bot, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply(f" è·¥è·¥ú' Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥, ·¥õ·¥ú Ä…¥ ·¥èÍú∞Íú∞ ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")
    chat_type = message.chat.type
    if chat_type == enums.ChatType.PRIVATE:
        return await message.reply_text("·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥è…¥ ü è ·¥°·¥è Ä·¥ãÍú± …™…¥ …¢ Ä·¥è·¥ú·¥òÍú± !")
    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grpid = message.chat.id
        title = message.chat.title
    else:
        return
    userid = message.from_user.id
    user = await bot.get_chat_member(grpid, userid)
    if user.status != enums.ChatMemberStatus.ADMINISTRATOR and user.status != enums.ChatMemberStatus.OWNER and str(userid) not in ADMINS:
        return
    else:
        pass
    reply = await message.reply_text("<b>·¥ò ü·¥á·¥ÄÍú±·¥á ·¥°·¥Ä…™·¥õ...</b>")
    await save_group_settings(grpid, 'is_tutorial', False)
    await reply.edit_text(f"<b>Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü  ü…™…¥·¥ã ‚úÖ</b>")
    

@Client.on_callback_query(filters.regex("topsearch"))
async def topsearch_callback(client, callback_query):
    
    def is_alphanumeric(string):
        return bool(re.match('^[a-zA-Z0-9 ]*$', string))
    
    limit = 20  # Default limit or get from somewhere else if needed

    top_messages = await mdb.get_top_messages(limit)

    # Use a set to ensure unique messages (case insensitive).
    seen_messages = set()
    truncated_messages = []

    for msg in top_messages:
        # Convert message to lower case for uniqueness check
        msg_lower = msg.lower()
        if msg_lower not in seen_messages and is_alphanumeric(msg):
            seen_messages.add(msg_lower)
            
            if len(msg) > 35:
                truncated_messages.append(msg[:32] + "...")
            else:
                truncated_messages.append(msg)

    # Create keyboard layout with 2 messages per row
    keyboard = [truncated_messages[i:i+2] for i in range(0, len(truncated_messages), 2)]
    
    reply_markup = ReplyKeyboardMarkup(
        keyboard, 
        one_time_keyboard=True, 
        resize_keyboard=True, 
        placeholder="Most searches of the day"
    )
    
    await callback_query.message.reply_text("<b>T·¥è·¥ò S·¥á·¥Ä Ä·¥Ñ ú·¥ás O“ì T ú·¥á D·¥Ä è üëá</b>", reply_markup=reply_markup)
    await callback_query.answer()

@Client.on_message(filters.command('top'))
async def top(_, message):

    def is_alphanumeric(string):
        return bool(re.match('^[a-zA-Z0-9 ]*$', string))
    
    try:
        limit = int(message.command[1])
    except (IndexError, ValueError):
        limit = 20

    top_messages = await mdb.get_top_messages(limit)

    seen_messages = set()
    truncated_messages = []

    for msg in top_messages:
        if msg.lower() not in seen_messages and is_alphanumeric(msg):
            seen_messages.add(msg.lower())
            
            if len(msg) > 35:
                truncated_messages.append(msg[:35 - 3])
            else:
                truncated_messages.append(msg)

    keyboard = []
    for i in range(0, len(truncated_messages), 2):
        row = truncated_messages[i:i+2]
        keyboard.append(row)
    
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True, placeholder="Most searches of the day")
    await message.reply_text(f"<b>T·¥è·¥ò S·¥á·¥Ä Ä·¥Ñ ú·¥ás O“ì T ú·¥á D·¥Ä è üëá</b>", reply_markup=reply_markup)

    
@Client.on_message(filters.command('trendlist'))
async def trendlist(client, message):
    def is_alphanumeric(string):
        return bool(re.match('^[a-zA-Z0-9 ]*$', string))
    
    limit = 31

    if len(message.command) > 1:
        try:
            limit = int(message.command[1])
        except ValueError:
            await message.reply_text("Invalid number format.\nPlease provide a valid number after the /trendlist command.")
            return 
    try:
        top_messages = await mdb.get_top_messages(limit)
    except Exception as e:
        await message.reply_text(f"Error retrieving messages: {str(e)}")
        return  

    if not top_messages:
        await message.reply_text("No top messages found.")
        return 
    seen_messages = set()
    truncated_messages = []

    for msg in top_messages:
        if msg.lower() not in seen_messages and is_alphanumeric(msg):
            seen_messages.add(msg.lower())
            truncated_messages.append(msg[:32] + '...' if len(msg) > 35 else msg)

    if not truncated_messages:
        await message.reply_text("No valid top messages found.")
        return  

    formatted_list = "\n".join([f"{i+1}. <b>{msg}</b>" for i, msg in enumerate(truncated_messages)])

    additional_message = "‚ö°Ô∏è ùë®ùíçùíç ùíïùíâùíÜ ùíìùíÜùíîùíñùíçùíïùíî ùíÇùíÉùíêùíóùíÜ ùíÑùíêùíéùíÜ ùíáùíìùíêùíé ùíòùíâùíÇùíï ùíñùíîùíÜùíìùíî ùíâùíÇùíóùíÜ ùíîùíÜùíÇùíìùíÑùíâùíÜùíÖ ùíáùíêùíì. ùëªùíâùíÜùíö'ùíìùíÜ ùíîùíâùíêùíòùíè ùíïùíê ùíöùíêùíñ ùíÜùíôùíÇùíÑùíïùíçùíö ùíÇùíî ùíïùíâùíÜùíö ùíòùíÜùíìùíÜ ùíîùíÜùíÇùíìùíÑùíâùíÜùíÖ, ùíòùíäùíïùíâùíêùíñùíï ùíÇùíèùíö ùíÑùíâùíÇùíèùíàùíÜùíî ùíÉùíö ùíïùíâùíÜ ùíêùíòùíèùíÜùíì."
    formatted_list += f"\n\n{additional_message}"

    reply_text = f"<b>Top {len(truncated_messages)} T Ä·¥Ä…¥·¥Ö…™…¥…¢ ·¥è“ì ·¥õ ú·¥á ·¥Ö·¥Ä è üëá:</b>\n\n{formatted_list}"
    
    await message.reply_text(reply_text)

@Client.on_message(filters.command("restart") & filters.user(ADMINS))
async def stop_button(bot, message):
    msg = await bot.send_message(text="<b><i> ô·¥è·¥õ …™Íú±  Ä·¥áÍú±·¥õ·¥Ä Ä·¥õ…™…¥…¢</i></b>", chat_id=message.chat.id)       
    await asyncio.sleep(3)
    await msg.edit("<b><i><u> ô·¥è·¥õ …™Íú±  Ä·¥áÍú±·¥õ·¥Ä Ä·¥õ·¥á·¥Ö</u> ‚úÖ</i></b>")
    os.execl(sys.executable, sys.executable, *sys.argv)


@Client.on_message(filters.command("del_msg") & filters.user(ADMINS))
async def del_msg(client, message):
    user_id = message.from_user.id
    await delete_all_msg(user_id)
    await message.reply_text('·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± ·¥Ñ ú·¥Ä…¥…¥·¥á ü  ü…™s·¥õ  ú·¥Äs  ô·¥á·¥á…¥ ·¥Ñ ü·¥á·¥Ä Ä·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ‚úÖ')

